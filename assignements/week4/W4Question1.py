from pyspark.sql import SparkSession
from pyspark.sql.functions import *

from config.config import Config

config = Config()
get_config = config.get_config()

spark = SparkSession.builder.master("local[*]").appName("week4-question1").enableHiveSupport().getOrCreate()

orders_wh_file_path = get_config['orders_wh']
orders_path = get_config['orders']
customers_path = get_config['customers']
order_item_path = get_config['order_items']

orders_rdd = spark.sparkContext.textFile(orders_path)
customers_rdd = spark.sparkContext.textFile(customers_path)
order_item_rdd = spark.sparkContext.textFile(order_item_path)

# orders
# order_id || order_date || customer_id || order_status

# customers
# customer_id || customer_fname || customer_lname || customer_email || customer_password || customer_street ||customer_city ||customer_state || customer_zipcode

# order_items
# order_item_id || order_id || order_item_product_id || order_item_quantity || order_item_subtotal || order_item_product_price

# 1. we need to find top 10 customers who have spent the most amount (premium customers)

order_item_subtotal = order_item_rdd.map(lambda x : (x.split(",")[1], float(x.split(",")[4])))

order_customer_id_rdd = orders_rdd.map(lambda x : (x.split(",")[0], x.split(",")[2]))
joined_rdd = order_item_subtotal.join(order_customer_id_rdd)

for item in joined_rdd.take(10):
    print(item)

mapped_rdd = joined_rdd.map(lambda x : (x[1][1], x[1][0]))
reduced_rdd = mapped_rdd.reduceByKey(lambda x, y: x + y).sortBy(lambda x : x[1], ascending=False)

for item in reduced_rdd.take(10):
    print(item)

# 2. top 10 product id's with most quantities sold

getting_column_rdd = order_item_rdd.map(lambda x : (x.split(",")[2], int(x.split(",")[3])))
most_sold = getting_column_rdd.reduceByKey(lambda x, y: x + y).sortBy(lambda x: x[1], ascending=False)
print("=====================")
for item in most_sold.take(10):
    print(item)

# 3. How many customers are from Caguas city

city_rdd = customers_rdd.map(lambda x: x.split(",")[6])
total_customers = city_rdd.filter(lambda c : c == 'Caguas')
print("=====================")
print(total_customers.count())

# 4. Top 3 states with maximum customers

state_rdd = customers_rdd.map(lambda x : (x.split(",")[7], 1))
customers_per_state_rdd = state_rdd.reduceByKey(lambda x, y : x + y).sortBy(lambda x: x[1], ascending=False)
print("=====================")
for item in customers_per_state_rdd.take(3):
    print(item)

# 5. How many customers have spent more than $1000 in total
print("------( order_id, total)------")
order_item_map = order_item_rdd.map(lambda x : (int(x.split(",")[1]), float(x.split(",")[4])))
for item in order_item_map.take(3):
    print(item)

print("---------(order_id, customer_id)----------")
order_map = orders_rdd.map(lambda x: (int(x.split(",")[0]), int(x.split(",")[2])))
for item in order_map.take(3):
    print(item)

print("----------(order_id, (total, customer_id))---------")
joined_rdd = order_item_map.join(order_map)
for item in joined_rdd.take(3):
    print(item)

mapped_rdd = joined_rdd.map(lambda x: (x[1][1], x[1][0]))
total_per_customer = mapped_rdd.reduceByKey(lambda x, y : x + y)
filtered_customer = total_per_customer.filter(lambda x : x[1] > 1000)

for item in filtered_customer.take(3):
    print(item)

print("filtered customer greater than 1000 : " + str(filtered_customer.count()))

# 6. Which state has most number of orders in CLOSED status

customer_state_map = customers_rdd.map(lambda x: (x.split(",")[0], x.split(",")[7]))
customer_status_map = orders_rdd.map(lambda x: (x.split(",")[2], x.split(",")[3])).filter(lambda x : x[1] == 'CLOSED')

print("----------(customer_id, ('CLOSED', 'state'))----------")
joined_map = customer_status_map.join(customer_state_map)
state_status_map = joined_map.map(lambda x: (x[1][1], 1))
total_status_per_state = state_status_map.reduceByKey(lambda x, y : x + y).sortBy(lambda x : x[1], ascending=False)

for item in total_status_per_state.take(3):
    print(item)

# 7. how many customers are active (active customers are the one's who placed at least one order)
print("Active customers : --> "+ str(orders_rdd.map(lambda x : x.split(",")[2]).distinct().count()))

# 8. What is the revenue generated by each state in sorted order

print("+++++++++(order_customer_id, order_id)++++++")
customer_order_map = orders_rdd.map(lambda x : (int(x.split(",")[2]), int(x.split(",")[0])))
for item in customer_order_map.take(3):
    print(item)

print("+++++++++(customer_id, state)++++++")
customer_state_map = customers_rdd.map(lambda x : (int(x.split(",")[0]), x.split(",")[7]))
for item in customer_state_map.take(3):
    print(item)

print("+++++++++(customer_id, (order_id, state)++++++")
joined_map = customer_order_map.join(customer_state_map)
for item in joined_map.take(3):
    print(item)

print("+++++++++(order_id, state)++++++")
order_state_map = joined_map.map(lambda x : (x[1][0], x[1][1]))
for item in order_state_map.take(3):
    print(item)


print("+++++++++(order_id, sub_total)++++++")
order_sub_total_map = order_item_rdd.map(lambda x : (int(x.split(",")[1]), float(x.split(",")[4])))
for item in order_sub_total_map.take(3):
    print(item)


print("+++++++++(order_id, (state, sub_total))++++++")
final_joined = order_state_map.join(order_sub_total_map)
for item in final_joined.take(3):
    print(item)


print("+++++++++(state, sub_total)++++++")
final_mapped = final_joined.map(lambda x : (x[1][0], x[1][1]))
for item in final_mapped.take(3):
    print(item)

print("+++++++++(state, total)++++++")
final_reduced = final_mapped.reduceByKey(lambda x, y : x + y).sortBy(lambda x : x[1], ascending=False)
for item in final_reduced.take(3):
    print(item)










